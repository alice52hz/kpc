import {Icon} from '../icon';
import {addStyle, isTextBlock, getRestProps} from '../utils';
import {makeStyles} from './styles';
import {noop} from 'intact-shared';

const {
    className, style, type, value, defaultValue, placeholder,
    clearable, disabled, size, rows, autoWidth, fluid,
    width, stackClearIcon, frozenOnInput, readonly,

    'ev-click': click,
    'ev-mounseenter': mouseenter,
    'ev-mouseleave': mouseleave,

    _width, _inputing, _originalValue,

    ...rest
} = this.get();

const inputValue = frozenOnInput && _inputing ? _originalValue : value;
const hasValue = inputValue != null && inputValue !== '';

const classNameObj = {
    'k-input': true,
    [`k-${size}`]: size !== 'default',
    'k-group': $blocks.prepend || $blocks.append,
    'k-disabled': disabled,
    'k-with-prefix': $blocks.prefix,
    'k-with-suffix': $blocks.suffix,
    'k-clearable': clearable,
    'k-auto-width': autoWidth,
    'k-fluid': fluid,
    'k-stack-clear': stackClearIcon,
    [className]: className,
    [makeStyles()]: true,
}

<div class={classNameObj}
    style={width != null ? addStyle(style, {width: `${width}px`}) : style} 
    ev-click={click}
    ev-mouseenter={mouseenter}
    ev-mouseleave={mouseleave}
>
    {do {
        if ($blocks.prepend) {
            // if the children of this block is text node
            // we add a padding to the wrapper node
            // so we handle this block manually
            const children = $blocks.prepend(noop);
            <div class={{
                "k-input-prepend": true, 
                "k-input-padding": isTextBlock(children)
           }}>{children}</div>
        }
    }}
    <div class="k-input-wrapper">
        <div class="k-input-prefix" v-if={$blocks.prefix}>
            <b:prefix />
        </div>
        <input v-if={type !== 'textarea'}
            {...getRestProps(this, rest)}
            class="k-input-inner" 
            type={type}
            value={inputValue}
            ev-focus={this.startInput}
            ev-blur={this.endInput}
            ev-input={this.onInput}
            defaultValue={defaultValue}
            readOnly={readonly}
            placeholder={placeholder}
            disabled={disabled}
            ref={this.inputRef}
            style={autoWidth ? {width: _width + 'px'} : undefined}
        />
        <textarea v-else 
            {...getRestProps(this, rest)}
            class="k-input-inner k-textarea"
            value={inputValue}
            ev-focus={this.startInput}
            ev-blur={this.endInput}
            ev-input={this.onInput}
            defaultValue={defaultValue}
            readOnly={readonly} 
            placeholder={placeholder}
            disabled={disabled}
            rows={rows}
            ref={this.inputRef}
        ></textarea>
        <div class="k-input-suffix" v-if={$blocks.suffix || clearable && !disabled}>
            <Icon v-if={clearable && !disabled}
                class={{
                    "k-input-clear ion-ios-close": true, 
                    "k-input-show": hasValue,
                }}
                ev-click={this.clear}
            />{' '}
            <b:suffix />
        </div>
        <div v-if={autoWidth}
            class="k-input-fake"
            ref={this.fakeRef}
        >{!hasValue ? placeholder : inputValue}</div>
    </div>
    {do {
        if ($blocks.append) {
            const children = $blocks.append(noop);
            <div class={{
                "k-input-append": true, 
                "k-input-padding": isTextBlock(children)
           }}>{children}</div>
        }
    }}
</div>
