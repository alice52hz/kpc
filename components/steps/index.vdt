import {getRestProps, mapChildren} from '../utils';
import {Step} from './step';
import makeStyles from './styles';
import {context as ClickableContext} from './useClickable';

const {
    children, className, value,
    status, type, clickable
} = this.get();

const classNameObj = {
    'k-steps': true,
    [className]: className,
    [`k-${type}`]: true,
    'k-clickable': clickable,
    [makeStyles()]: true,
};

let stepIndex = 0;
let steps = (Array.isArray(children) ? children : [children]).filter(vNode => {
    if (vNode && vNode.tag === Step) {
        vNode.props = {...vNode.props, index: stepIndex};
        stepIndex++;
        return true;
    }
    return false;
});

// add width
const width = (100 / stepIndex) + '%'; 

<ClickableContext.Provider value={{value, status, width, onChange: this.clickable.onChangeIndex}}>
    <div class={classNameObj} {...getRestProps(this)}>{steps}</div>
</ClickableContext.Provider>