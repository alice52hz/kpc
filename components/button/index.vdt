import {isStringOrNumberNotEmpty, getRestProps} from '../utils';
import {Icon} from '../icon';
import makeStyles from './styles';
import {DynamicButton} from './dynamicButton';

let {
    type, className, size, icon, circle, ref, key, tabindex,
    tagName, htmlType, fluid, children, loading, disabled,
    name, ghost
} = this.get();

const checked = this.isChecked();

const isIcon = child => (
    child.tag === Icon ||
    child.className && child.className.indexOf('icon') > -1
);

let iconSide;
// hack for loading transition of width
if (!icon && Array.isArray(children)) {
    children.forEach((child, index) => {
        if (child) {
            if (child.type === 1 || isStringOrNumberNotEmpty(child)) {
                // is a text node
                // wrap text node with span
                children[index] = <span>{child}</span>
            }
            // whether the icon is on the left side or right
            if (index === 0) {
                if (isIcon(child)) {
                    iconSide = 'left';
                }
            } else if (index === children.length - 1) {
                if (isIcon(child)) {
                    iconSide = 'right';
                }
            }
        }
    });
} else if (isStringOrNumberNotEmpty(children) || children && children.type === 1) {
    // wrap text node with span
    children = <span>{children}</span>
}

const classNameObj = {
    'k-btn': true,
    [`k-${type}`]: type !== 'default',
    [`k-${size}`]: size !== 'default',
    'k-btn-icon': icon,
    [className]: className, 
    'k-circle': circle,
    'k-loading': loading,
    'k-fluid': fluid,
    'k-active': checked,
    'k-disabled': disabled || loading,
    'k-ghost': ghost,
    [makeStyles({iconSide})]: true,
};

const loadingIcon = (
    <Icon class="ion-load-c k-icon-loading" 
        size={size /*loadingSizeMap[size]*/}
        key="k-loading"
        rotate
    />
);

const buttonGroup = this.buttonGroup;
const checkType = buttonGroup ? buttonGroup.get('checkType') : 'none';

<DynamicButton 
    class={classNameObj}
    tagName={tagName}
    {...getRestProps(this)}
    ref={this.elementRef}
    tabindex={disabled || loading ? '-1' : tabindex}
    ev-click={this.onClick}
    ev-mouseup={this.onMouseUp}
>
    {loading ? 
        iconSide === 'right' ?
            [children, loadingIcon] :
            [loadingIcon, children] :
        children 
    }
    <input type={checkType} v-if={checkType !== 'none'}
        class="k-button-input"
        name={name} 
        checked={checked}
        tabindex="-1"
    />
</DynamicButton>
