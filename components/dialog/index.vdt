import {Button} from '../button';
import {Icon} from '../icon';
import {Portal} from '../portal';
import {_$} from '../../i18n';
import {Transition} from 'intact';
import {getRestProps, stopPropagation} from '../utils';
import makeStyles from './styles';

const {
    size, container, hideClose,
    overlay, value, width,
    mode, className, cancelText,
    okText, loading, disabledOk,

    _dragging
} = this.get();

const isHide = mode === 'hide';
const classNameObj = {
   "k-dialog": true, 
    'k-dragging': _dragging,
    [`k-${size}`]: size !== 'default',
};
const dialog = (
    <Transition
        show={value}
        appear={true}
        key="dialog"
        onEnter={this.onEnter}
        onAfterLeave={this.onAfterLeave}
        ev-mousedown={this._onMouseDown}
    >
        <div v-if={isHide ? true : value}
            class={classNameObj}
            ref={this.dialogRef}
            style={{width: typeof width === 'number' ? `${width}px` : width}}
        >
            <b:content>
                <div class="k-dialog-header"
                    ev-mousedown={this._dragStart}
                >
                    <b:header>
                        <span class="k-dialog-title">{this.get('title')}</span>
                    </b:header>
                    <Button type="none" icon title={_$("关闭")} class="k-dialog-close"
                        ev-click={this._terminate}
                        v-if={!hideClose && !$props.hideClose}
                        ev-mousedown={stopPropagation}
                    >
                        <Icon class="ion-ios-close-empty" />
                    </Button>
                </div>
                <div class="k-dialog-body"><b:body>{this.get('children')}</b:body></div>
                <b:footer-wrapper>
                    <div class="c-clearfix k-dialog-footer">
                        <b:footer>
                            <Button class="k-dialog-ok" 
                                type="primary"
                                ev-click={this.ok} 
                                loading={loading}
                                disabled={disabledOk}
                            >{okText}</Button>
                            <Button class="k-dialog-cancel" 
                                type="secondary"
                                ev-click={this.cancel}
                            >{cancelText}</Button>
                        </b:footer>
                    </div>
                </b:footer-wrapper>
            </b:content>
        </div>
    </Transition>
);

<Portal autoDestroy={false} ev-appended={this._onAppended}
    container={container}
>
    <div 
        class={{
            "k-dialog-wrapper": true,
            [className]: className,
            [$props.className]: $props.className,
            'k-open': value,
            [makeStyles()]: true,
        }} 
    >
        <b:overlay>
            <Transition 
                show={overlay ? value : false} 
                appear
                name="k-fade"
            >
                <div v-if={isHide ? true : overlay ? value : false}
                    class="k-dialog-overlay"
                    ev-click={this._onClickOverlay}
                ></div>
            </Transition>
        </b:overlay>
        <div class="k-dialog-entity"
            key="wrapper" 
            ref={this.entityRef}
            ev-click={this._onClickWrapper}
            v-if={overlay}
        >{dialog}</div>
        <template v-else>{dialog}</template>
    </div>
</Portal>
