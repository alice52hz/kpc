import {eachChildren} from '../utils';
import {TableColumn} from './column';
import {makeStyles} from './styles';
import {isStringOrNumber, isNull} from 'intact-shared';
import {getClassAndStyleForFixed} from './useFixedColumns';
import {Affix} from '../affix';
import {TableRow} from './row';
import {Checkbox} from '../checkbox';
import {context} from './useGroup';
import {context as sortableContext} from './useSortable';
import {Spin} from '../spin';
import {Transition} from 'intact';
import {_$} from '../../i18n';
import {context as tableContext} from './useColumns';

const {
    data, children, className, fixHeader,
    checkType, rowKey, type, stripe,
    rowClassName, group, sort, loading,
    merge,
} = this.get();
const {columns, cols, maxRows, maxCols} = this.columns.getData();
const {onScroll, scrollPosition, hasFixed, getHasFixedLeft} = this.fixedColumns;
const {stickHeader, excludeStickHeader, elementRef, scrollRef, headRef} = this.stickyHeader;
const classNameObj = {
    'k-table': true,
    'k-fix-header': fixHeader,
    [`k-scroll-${scrollPosition.value}`]: scrollPosition.value,
    'k-fix-columns': hasFixed.value,
    [`k-${type}`]: type && type !== 'default',
    'k-stripe': stripe,
    [className]: className,
    [makeStyles()]: true,
};
const style = isStringOrNumber(fixHeader) ? 
    {maxHeight: `${fixHeader}px`} :
    null;

const colgroup = (
    <colgroup>
        <col v-if={checkType !== 'none'} width="40" />
        <col v-for={cols} 
            width={$value.width}
            class={{[$value.className]: $value.className}}
        />
    </colgroup>
);
const hasData = data && data.length;

const hasFixedLeft = getHasFixedLeft();
const {isChecked, isAllChecked, toggleCheckedAll} = this.checked;
const Provider = context.Provider;
const SortableProvider = sortableContext.Provider;
const TableProvider = tableContext.Provider;
const thead = (
    <TableProvider value={checkType}>
        <Provider value={{group, onChange: this.onChangeGroup}}>
            <SortableProvider value={{sort, onChange: this.sortable.onChange}}>
                <thead>
                    <tr v-for={columns}>
                        <th v-if={$key === 0 && checkType !== 'none'}
                            {...getClassAndStyleForFixed({
                                fixed: hasFixedLeft ? 'left' : false,
                                offset: 0,
                            })} 
                            rowspan={maxRows}
                        >
                            <Checkbox v-if={checkType === 'checkbox'}
                                value={isAllChecked()} 
                                ev-$change:value={toggleCheckedAll}
                                disabled={!hasData}
                            />
                        </th>
                        {$value}
                    </tr>
                </thead>
            </SortableProvider>
        </Provider>
    </TableProvider>
);

const {isDisabledKey} = this.disableRow;
const grid = [];
let key;
const tbody = (
    <tbody>
        <tr v-if={!hasData} key="table-empty">
            <td colspan={maxCols + (checkType !== 'none' ? 1 : 0)} class="k-table-empty">
                <b:empty>{_$('/(ㄒoㄒ)/~~ 没有找到亲要的数据哦~')}</b:empty>
            </td>
        </tr>
        <template v-else>
            <TableRow v-for={data}
                key={key = rowKey($value, $key)}
                cols={cols}
                data={$value}
                checkType={checkType}
                hasFixedLeft={hasFixedLeft}
                onClick={this.clickRow}
                checked={isChecked(key)}
                index={$key}
                disabled={isDisabledKey(key)}
                className={rowClassName && rowClassName($value, $key, key)}
                merge={merge}
                grid={grid}
            />
        </template>
    </tbody>
);

<div class={classNameObj} ref={elementRef}>
    <div class="k-table-wrapper" style={style} ev-scroll={onScroll} ref={scrollRef}>
        <Affix v-if={!isNull(stickHeader.value)}
            top={stickHeader.value}
            exclude={excludeStickHeader}
            class="k-table-affix-header"
        >
            <table ref={headRef}>
                <template>{colgroup}</template>
                <template>{thead}</template>
            </table>
        </Affix>
        <table>
            <template>{colgroup}</template>
            <template v-if={isNull(stickHeader.value)}>{thead}</template>
            <template>{tbody}</template>
        </table>
    </div>
    <Transition name="k-fade">
        <Spin v-if={loading} overlay size="small" class="k-table-spin" />
    </Transition>
</div>
