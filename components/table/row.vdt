import {getClassAndStyleForFixed} from './useFixedColumns';
import {noop} from 'intact-shared';
import {Checkbox} from '../checkbox';
import {Radio} from '../radio';
import {getTextByChildren} from '../utils';

const {
    cols, data, checkType, hasFixedLeft,
    checked, disabled, className, merge,
    grid, index: rowIndex,
} = this.get();
const classNameObj = {
    'k-disabled': disabled,
    'k-checked': checked,
    [className]: className,
};

const currentRow = this.currentRow = [];
grid.push(currentRow);

const shouldRenderAndGetSpans = merge ?
    (columnIndex, props) => {
        const prevCell = currentRow[columnIndex - 1];
        if (prevCell && prevCell.colspan > 1) {
            const spans = {
                rowspan: prevCell.rowspan,
                colspan: prevCell.colspan - 1,
            };
            currentRow.push(spans);
            return false;
        }

        if (rowIndex > 0) {
            const prevRow = grid[rowIndex - 1];
            const aboveCell = prevRow[columnIndex]; 
            if (aboveCell && aboveCell.rowspan > 1) {
                const spans = {
                    rowspan: aboveCell.rowspan - 1,
                    colspan: aboveCell.colspan
                };
                currentRow.push(spans);
                return false;
            }
        }

        const spans = merge(data, props, rowIndex, columnIndex);
        currentRow.push(spans);

        return spans;
    } :
    noop

const createCheckTypeVNode = (children) => {
    const spans = shouldRenderAndGetSpans(0, null); 
    if (spans === false) return;
    return <td
        {...getClassAndStyleForFixed({
            fixed: hasFixedLeft ? 'left' : false,
            offset: 0,
            className: 'k-table-check'
        })}
        {...spans}
    >{children}</td>
}
const checkTypeVNode = checkType === 'checkbox' ?
    createCheckTypeVNode(<Checkbox value={checked} disabled={disabled} />) :
    checkType === 'radio' ?
        createCheckTypeVNode(<Radio value={checked} disabled={disabled} />) :
        null;

const columnOffset = checkType !== 'none' ? 1 : 0;

<tr ev-click={this.onClick} class={classNameObj}>
    {checkTypeVNode}
    <template>
        {cols.map((props, columnIndex) => {
            const blocks = props.$blocks; 
            let children = data[props.key];
            if (blocks) {
                const template = blocks.template || blocks.default;
                if (template) {
                    children = template(noop, data);
                }
            }

            const spans = shouldRenderAndGetSpans(columnIndex + columnOffset, props);
            if (spans === false) return;

            return (
                <td {...getClassAndStyleForFixed(props, checkType)}
                    title={getTextByChildren(children)}
                    {...spans}
                >
                    {children}
                </td>
            );
        })}
    </template>
</tr>

