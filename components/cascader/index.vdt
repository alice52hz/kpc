import {Dropdown, DropdownMenu, DropdownItem} from '../dropdown';
import {Icon} from '../icon';
import {_$} from '../../i18n';
import {makeMenuStyles} from './styles';

const {data, trigger, changeOnSelect, _show} = this.get();
const classNameObj = {
    'k-cascader-menu': true,
    [makeMenuStyles()]: true,
};

const {values, isActive, isSelected, onClickItem, onSelect} = this.value;
const Options = (data, level, parentShowed, loaded) => {
    if (!data.length) {
        if (!loaded) {
            return <Icon class="ion-load-c k-cascader-loading" rotate />
        } else {
            return <div class="k-cascader-empty">{_$('无数据')}</div>
        }
    }

    return data.map((item, index) => {
        const value = item.value;
        const active = isActive(value, level);
        const selected = isSelected(value, level);
        const children = item.children;
        const Item = () => {
            const events = {
                'ev-click': onClickItem.bind(null, value, level, !children),
            };
            if (trigger === 'hover') {
                events['ev-mouseenter'] = events['ev-click'];
            }
            if (!changeOnSelect) {
                events['ev-select'] = onSelect;
            }

            return (
                <DropdownItem
                    disabled={item.disabled}
                    class={{
                        'k-cascader-option': true,
                        'k-active': active,
                        'k-selected': selected,
                    }}
                    {...events}
                >
                    {item.label}
                    <Icon v-if={children}
                        class="k-cascader-arrow ion-ios-arrow-right"
                    /> 
                </DropdownItem>
            );
        };

        const show = parentShowed && active;

        return (
            children ?
                <Dropdown
                    position={this.positionObj}
                    of="parent"
                    disabled={item.disabled}
                    trigger={trigger}
                    value={show}
                >
                    {Item()}
                    <DropdownMenu class={classNameObj}>
                        {show ? Options(children, level + 1, show, item.loaded) : null}
                    </DropdownMenu>
                </Dropdown> :
                Item()
        );
    });
}

<t:super>
    <b:base-menu>
        <DropdownMenu class={classNameObj}>
            {Options(data, 0, _show, true)}
        </DropdownMenu>
    </b:base-menu>
</t:super>
